
import { FormData } from '@/store/FormStore';

export class ScoringCalculationService {
  // Mapeamento entre campos do formul√°rio e nomes nas regras de pontua√ß√£o
  private static readonly FIELD_NAME_MAPPING: Record<string, string> = {
    lotePos: 'Lote da P√≥s-Gradua√ß√£o',
    matricula: 'Matr√≠cula',
    modalidade: 'Modalidade do Curso',
    parcelamento: 'Condi√ß√µes de Parcelamento',
    pagamento: 'Forma de Pagamento',
    formaCaptacao: 'Forma de Capta√ß√£o do Lead',
    tipoVenda: 'Canal/Local da Venda',
    vendaCasada: 'Venda Casada'
  };

  static calculateTotalPoints(formData: FormData, rules: any[]): number {
    console.log('üî¢ Calculando pontua√ß√£o total do formul√°rio');
    console.log('üìã Dados do formul√°rio:', formData);
    console.log('üìä Regras dispon√≠veis:', rules.length);
    console.log('üìä TODAS AS REGRAS:', rules);
    
    let totalPoints = this.getBasePoints();
    console.log(`üéØ Pontos base: ${totalPoints}`);

    // Iterar pelos campos que t√™m pontua√ß√£o
    for (const [formFieldName, ruleFieldName] of Object.entries(this.FIELD_NAME_MAPPING)) {
      const fieldValue = formData[formFieldName as keyof FormData];
      
      if (typeof fieldValue === 'string' && fieldValue.trim() !== '') {
        console.log(`üîç PROCESSANDO CAMPO: ${formFieldName} ‚Üí ${ruleFieldName} = "${fieldValue}"`);
        
        // Debug espec√≠fico para tipoVenda
        if (formFieldName === 'tipoVenda') {
          console.log(`üéØ TIPO VENDA - Valor do formul√°rio: "${fieldValue}"`);
          console.log(`üéØ TIPO VENDA - Campo nas regras: "${ruleFieldName}"`);
          console.log(`üéØ TIPO VENDA - Regras dispon√≠veis para este campo:`, 
            rules.filter(r => r.campo_nome === ruleFieldName)
          );
        }
        
        const fieldPoints = this.calculateFieldPointsByName(ruleFieldName, fieldValue, rules);
        console.log(`üìç Campo ${formFieldName} (${ruleFieldName}) = "${fieldValue}" ‚Üí ${fieldPoints} pts`);
        totalPoints += fieldPoints;
      }
    }

    console.log(`üèÜ Pontua√ß√£o total calculada: ${totalPoints}`);
    return totalPoints;
  }

  static getBasePoints(): number {
    // Retorna 1 ponto fixo como base, conforme regra estabelecida
    return 1;
  }

  static calculatePointsFromResponses(vendaRespostas: any[], rules: any[]): number {
    let totalPoints = 0;

    for (const resposta of vendaRespostas) {
      if (resposta.campo_nome && resposta.valor) {
        totalPoints += this.calculateFieldPointsByName(resposta.campo_nome, resposta.valor, rules);
      }
    }

    return totalPoints;
  }

  private static calculateFieldPoints(fieldName: string, fieldValue: string, rules: any[]): number {
    // Forma de capta√ß√£o n√£o pontua
    if (fieldName === 'formaCaptacao') {
      return 0;
    }

    const rule = rules.find(rule => rule.field_name === fieldName && rule.field_value === fieldValue);
    return rule ? rule.points : 0;
  }

  private static calculateFieldPointsByName(fieldName: string, fieldValue: string, rules: any[]): number {
    console.log(`üîç Buscando regra: campo="${fieldName}", valor="${fieldValue}"`);
    console.log(`üìä Total de regras dispon√≠veis: ${rules.length}`);
    
    // Log de todas as regras para debug
    console.log(`üìä REGRAS PARA CAMPO "${fieldName}":`, 
      rules.filter(r => r.campo_nome === fieldName)
    );
    
    // Forma de capta√ß√£o n√£o pontua
    if (fieldName === 'Forma de Capta√ß√£o do Lead') {
      console.log('üìù Campo de capta√ß√£o n√£o pontua');
      return 0;
    }

    const rule = rules.find(rule => {
      const fieldMatch = rule.campo_nome === fieldName;
      const valueMatch = rule.opcao_valor === fieldValue;
      console.log(`Verificando regra: ${rule.campo_nome} = ${rule.opcao_valor} (${rule.pontos} pts) - Field: ${fieldMatch}, Value: ${valueMatch}`);
      return fieldMatch && valueMatch;
    });
    
    const points = rule ? rule.pontos : 0;
    console.log(`üéØ Regra encontrada:`, rule ? `${points} pontos` : 'nenhuma');
    
    if (!rule) {
      console.warn(`‚ö†Ô∏è NENHUMA REGRA ENCONTRADA para campo="${fieldName}" e valor="${fieldValue}"`);
      console.warn(`‚ö†Ô∏è Valores dispon√≠veis para este campo:`, 
        rules.filter(r => r.campo_nome === fieldName).map(r => r.opcao_valor)
      );
    }
    
    return points;
  }
}
