
import { supabase } from '@/integrations/supabase/client';
import { ErrorService } from '@/services/error/ErrorService';

export class VendaDeleteService {
  private static readonly AUTHORIZED_EMAIL = 'wallasmonteiro019@gmail.com';

  static async deleteVenda(vendaId: string, currentUserEmail: string): Promise<boolean> {
    try {
      console.log('üóëÔ∏è VendaDeleteService: Iniciando exclus√£o de venda:', vendaId.substring(0, 8));
      console.log('üë§ Usu√°rio solicitante:', currentUserEmail);

      if (!this.hasDeletePermission(currentUserEmail)) {
        console.error('‚ùå Usu√°rio n√£o autorizado:', currentUserEmail);
        throw new Error('Voc√™ n√£o tem permiss√£o para excluir vendas.');
      }

      console.log('üîç Executando diagn√≥stico PR√â-exclus√£o...');
      await this.diagnosticoCompleto(vendaId);

      console.log('üî• Executando RPC delete_venda_cascade...');
      
      const { data: deleteResult, error: rpcError } = await supabase.rpc('delete_venda_cascade', {
        venda_id: vendaId
      });

      if (rpcError) {
        console.error('‚ùå ERRO RPC:', rpcError);
        console.log('üîç Diagn√≥stico p√≥s-erro RPC...');
        await this.diagnosticoCompleto(vendaId);
        throw new Error(`Erro na fun√ß√£o de exclus√£o: ${rpcError.message}`);
      }

      console.log('üìä Resultado da fun√ß√£o RPC:', deleteResult);
      
      if (deleteResult !== true) {
        console.error('üí• Fun√ß√£o RPC retornou falso - exclus√£o falhou');
        console.log('üîç Diagn√≥stico de falha...');
        await this.diagnosticoCompleto(vendaId);
        throw new Error('A exclus√£o falhou na fun√ß√£o do banco de dados. Verifique os logs para mais detalhes.');
      }

      console.log('üîç Verifica√ß√£o final de seguran√ßa...');
      
      const { data: vendaAindaExiste, error: checkError } = await supabase
        .from('form_entries')
        .select('id')
        .eq('id', vendaId)
        .maybeSingle();

      if (checkError && checkError.code !== 'PGRST116') {
        console.warn('‚ö†Ô∏è Erro na verifica√ß√£o final (pode ser normal):', checkError);
      }

      if (vendaAindaExiste) {
        console.error('üí• ERRO CR√çTICO: Venda ainda existe ap√≥s fun√ß√£o RPC reportar sucesso!');
        await this.diagnosticoCompleto(vendaId);
        throw new Error('Inconsist√™ncia detectada - venda ainda existe ap√≥s exclus√£o reportada como bem-sucedida.');
      }

      console.log('üéâ EXCLUS√ÉO CONFIRMADA COM SUCESSO!');
      console.log('üìã Log de Auditoria - SUCESSO:', {
        acao: 'EXCLUSAO_VENDA_SUCESSO',
        vendaId: vendaId,
        usuario: currentUserEmail,
        timestamp: new Date().toISOString(),
        metodo: 'RPC_delete_venda_cascade'
      });

      return true;

    } catch (error) {
      console.error('üí• ERRO CR√çTICO na exclus√£o:', error);
      
      console.log('üìä Log de Auditoria - ERRO:', {
        acao: 'EXCLUSAO_VENDA_ERRO',
        vendaId: vendaId,
        usuario: currentUserEmail,
        timestamp: new Date().toISOString(),
        erro: error instanceof Error ? error.message : 'Erro desconhecido',
        stack: error instanceof Error ? error.stack : undefined
      });

      ErrorService.logError(error as Error, 'VendaDeleteService.deleteVenda');
      throw error;
    }
  }

  private static async diagnosticoCompleto(vendaId: string): Promise<void> {
    try {
      console.log('üî¨ === DIAGN√ìSTICO COMPLETO DETALHADO ===');
      
      const { data: venda, error: vendaError } = await supabase
        .from('form_entries')
        .select('*')
        .eq('id', vendaId)
        .maybeSingle();
      
      console.log('üìä Venda principal:', { 
        exists: !!venda, 
        error: vendaError?.message,
        data: venda ? {
          id: venda.id,
          aluno_id: venda.aluno_id,
          status: venda.status,
          vendedor_id: venda.vendedor_id
        } : null
      });

      if (!venda) {
        console.log('‚úÖ Venda n√£o encontrada - pode ter sido exclu√≠da com sucesso');
        return;
      }

      const { data: alunoViaFormEntry, error: alunoFormError } = await supabase
        .from('alunos')
        .select('*')
        .eq('form_entry_id', vendaId)
        .maybeSingle();
      
      console.log('üë§ Aluno via form_entry_id:', { 
        exists: !!alunoViaFormEntry, 
        error: alunoFormError?.message,
        data: alunoViaFormEntry ? {
          id: alunoViaFormEntry.id,
          nome: alunoViaFormEntry.nome,
          email: alunoViaFormEntry.email,
          form_entry_id: alunoViaFormEntry.form_entry_id
        } : null
      });

      if (venda.aluno_id) {
        const { data: alunoViaId, error: alunoIdError } = await supabase
          .from('alunos')
          .select('*')
          .eq('id', venda.aluno_id)
          .maybeSingle();
        
        console.log('üë§ Aluno via aluno_id:', { 
          exists: !!alunoViaId, 
          error: alunoIdError?.message,
          data: alunoViaId ? {
            id: alunoViaId.id,
            nome: alunoViaId.nome,
            form_entry_id: alunoViaId.form_entry_id
          } : null
        });
      }

      const { data: respostas, error: respostasError } = await supabase
        .from('respostas_formulario')
        .select('id, campo_nome, valor_informado')
        .eq('form_entry_id', vendaId);
      
      console.log('üìù Respostas do formul√°rio:', { 
        count: respostas?.length || 0, 
        error: respostasError?.message,
        sample: respostas?.slice(0, 3) || []
      });

      const totalDependencies = (respostas?.length || 0) + (alunoViaFormEntry ? 1 : 0);
      console.log('üîó Resumo de depend√™ncias:', {
        aluno: !!alunoViaFormEntry,
        respostas: respostas?.length || 0,
        total: totalDependencies
      });

      console.log('üî¨ === FIM DO DIAGN√ìSTICO ===');
      
    } catch (error) {
      console.error('‚ùå Erro no diagn√≥stico:', error);
    }
  }

  static hasDeletePermission(userEmail: string): boolean {
    const hasPermission = userEmail === this.AUTHORIZED_EMAIL;
    console.log('üîê Verificando permiss√£o de exclus√£o:', {
      userEmail,
      authorized: hasPermission,
      requiredEmail: this.AUTHORIZED_EMAIL
    });
    return hasPermission;
  }

  static getAuthorizedEmail(): string {
    return this.AUTHORIZED_EMAIL;
  }
}
